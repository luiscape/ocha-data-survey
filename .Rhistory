contributors()
install.packages("igraph")
library(igraph)
g <- graph.formula(
"dis" --+ "Luis Capelo"
)
g <- set.graph.attribute(g, "layout", value = layout.fruchterman.reingold(g))
g <- set.vertex.attribute(g, "size", value = 6)
g <- set.vertex.attribute(g, "label.dist", value = 0.7)
g <- set.edge.attribute(g, "arrow.size", value = 0.5)
plot(g)
library(igraph)
g <- graph.formula(
"dis" --+ "Luis Capelo"
)
g <- set.graph.attribute(g, "layout", value = layout.fruchterman.reingold(g))
g <- set.vertex.attribute(g, "size", value = 6)
g <- set.vertex.attribute(g, "label.dist", value = 0.7)
g <- set.edge.attribute(g, "arrow.size", value = 0.5)
plot(g)
library(igraph)
g <- graph.formula(
"dis" --+ "Luis Capelo"
"teste" --+ "Luis Capelo"
)
g <- set.graph.attribute(g, "layout", value = layout.fruchterman.reingold(g))
g <- set.vertex.attribute(g, "size", value = 6)
g <- set.vertex.attribute(g, "label.dist", value = 0.7)
g <- set.edge.attribute(g, "arrow.size", value = 0.5)
plot(g)
library(igraph)
g <- graph.formula(
"dis" --+ "Luis Capelo",
"teste" --+ "Luis Capelo"
)
g <- set.graph.attribute(g, "layout", value = layout.fruchterman.reingold(g))
g <- set.vertex.attribute(g, "size", value = 6)
g <- set.vertex.attribute(g, "label.dist", value = 0.7)
g <- set.edge.attribute(g, "arrow.size", value = 0.5)
plot(g)
install.packages("Zelig")
q()
load("~/Documents/Jobs + Applications/OCHA : CRD/Data and Analysis Project/Data/ScraperWiki/scraperwiki_utils.R")
load("~/Documents/Jobs + Applications/OCHA : CRD/Data and Analysis Project/Data/ScraperWiki/UN-data-functions.R")
install.packages("ggplot2")
demo()
1+2
# Basic mathematical operations
3 + 4
5 * 5
12 / 3
5^5
# R objects
# Vector
## Most basic object in R
## Contains elements of the same class
## Can be: character, numeric, integer, complex, logical(True/False))
# Create a vector
v=c(1,3,5,7)
v
v
# List
## (Vector with different class of objects)
l=c("Blue", 2, 5, "Red")
l
# Create a matrix
m=matrix(1:6,2,3)
m
## Matrix creation is column-wise
# Create a matrix from a vector
m2=matrix(1:6)
# Then add dimensionality
dim(m2)=c(2,3)
m2
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
# Check the attributes
attributes(m)
# Call a particular cell in a matrix
m
m[1,2]
# Dataframes
## Different than matrices => can store different classes of objects
## Usually called with read.table()
# Create a dataframe
d=data.frame(subjectID=1:5,gender=c("M","F","F","M","F"),score=c(8,3,6,5,5))
d
# Number of rows
nrow(d)
# Number of columns
ncol(d)
# Check the attributes
attributes(d)
# Call a particular cell in a dataframe
d[2,1]
d[1,2]
# Display dataframe
View(d)
# Edit dataframe
edit(d)
# Getting help on a function
?functionname
?edi
?edit
# Load package
library(psych)
# Download and install packages
install.packages("psych") ## Need to specify CRAN the 1st time
# Load package
library(psych)
install.packages(c("class", "colorspace", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "Zelig"))
packages()
packages()
?library
library()
?data.frame
numbers=c[1:10]
numbers=c(1:10)
numbers
words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
words
d=data.frame(subjectID=1:10, numbers=c(numbers), words=c(words))
d
d=data.frame(numbers=c(numbers), words=c(words))
d
nw=data.frame(numbers=c(numbers), words=c(words))
nw
attributes(nw)
numbers=c(1:10)
words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
nw=data.frame(numbers=c(numbers), words=c(words))
attributes(nw)
nw[8]
nw[8,1]
nw[8,1]
nw[8,2]
nw[8,2]
a=matrix(1:10)
a
dim(a)=c(2,3)
dim(a)=c(2,5)
a
dim(a)=c(2,5)
a
x=c(1:6)
y=c(5:10)
x
y
cbind(x,y)
rbind(x,y)
x=c(1:6)
y=c(5:10)
rbind(x,y)
x=c(1:6)
y=c(5:10)
cbind(x,y)
install.package(car)
install.packages(r)
install.packages(car)
?install.packages
?libraries
?library
library(car)
library()
library()
?data.frame
numbers=c(1:10)
words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
nw=data.frame(numbers=c(numbers),words=c(words))
attributes(nw)
nw
d=[2,8]
nw[2,8]
d[2,8]
nw
nw[1,8]
nw[8,1]
nw[1,8]
nw[8,2]
a=matrix(1:10)
dim(a)=c(2,5)
a
a=matrix(1:10)
dim(a)=c(2,5)
a
rbind(x,y)
cbind(x,y)
?install.packages
?install.packages("car")
install.packages("car")
search()
packages("car")
installpackages("car")
install.packages("car")
library(car)
library()
search()
library()
search()
numbers=c(1:10)
words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
nw=data.frame(numbers=c(numbers),words=c(words))
attributes(nw)
nw
a=matrix(1:10)
dim(a)=c(2,5)
a
x=c(1:6)
y=c(5:10)
rbind(x,y)
cbind(x,y)
numbers=c(1:10), words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten"), nw=data.frame(numbers=c(numbers),words=c(words)), attributes(nw)
dim=(a=(matrix(1:10))=c(2,5)
dim(a=(matrix(1:10))=c(2,5)
dim(matrix(1:10)=c(2,5)
dim(matrix(1:10)=(2,5)
dim(matrix(1:10)
(2,5)
a=dim(matrix(1:10))
a
a=dim(matrix(1:10))=c(2,5)
a=dim(matrix(1:10))=c(2,5)
a=dim(matrix(1:10))=(2,5)
a=matrix(1:10)
dim(a)=c(2,5)
a
a=matrix(1:10)
a
a=matrix(1:2,3:4,4:5,5:6,7:8,9:10)
m=matrix(1:6,2,3)
m
a=matrix(1:10,2,5)
a
hist(x)
x <- rnorm(100)
hist(x)
?open
ls
cd
?open
open.file
?open(file)
?open(file = "csv.scv")
open(file = "csv.scv")
open(file="csv.scv")
install.package("wnominate")
install.packages("wnominate")
t <- c("humanitariandata")
nchar(t)
WDIsearch('population')
library(WDI)
WDIsearch('population')
WDIsearch('population total')
WDIsearch('population')
WDIsearch('Population, millions')
data <- WDI(indicator="SPPOPTOTL", country=c('SO'), start=1960, end=2013)
data <- WDI(indicator='SPPOPTOTL', country=c('SO'), start=1960, end=2013)
data <- WDI(indicator='SPPOPTOTL', country=c('SY'), start=1960, end=2013)
WDIserach('SPPOPTOTL')
WDIsearch('SPPOPTOTL')
WDIsearch('population millions')
WDIsearch('Population, millions')
WDIsearch('SPPOPTOTL')
data <- WDI(indicator='SPPOPTOTL', country=c('SY'), start=1960, end=2012)
library(WDI)
WDI(indicator='SP.POP.TOTL', country=c('SO'), start=1960, end=2013)
data <- WDI(indicator='SP.POP.TOTL', country=c('SO'), start=1960, end=2013)
ggplot(data, (x=year, y=SP.POP.TOTL))
ggplot(data, aes(x=year, y=SP.POP.TOTL))
library(ggplot2)
ggplot(data, aes(x=year, y=SP.POP.TOTL))
ggplot(data, aes(x=SP.POP.TOTL, y=year))
ggplot(data, aes(year, SP.POP.TOTL))
ggplot(data, aes(year, SP.POP.TOTL)) + geom.line()
ggplot(data, aes(year, SP.POP.TOTL)) + geom_line()
View(data)
install.packages("RCURL")
install.packages("RCurl")
install.packages("lubridate")
install.packages('shiny')
install.packages('tester')
library(tester)
is_positive(1)
is_integer('banana')
is_matrix(x)
install.packages('rcharts')
require(devtools)
install.package('devtools')
install.packages('devtools')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages('slidify')
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install.packages('rattle')
install.packages('dplyr')
library(dplyr)
install.packages("RSQLite")
install.packages("RSQLite.extfuns")
library(quandl)
library(ggplot2)
library(Quandl)
Quandl.auth("eLH9q92jjXUb8xy6fysX") # adding my API key to the function.
Quandl.auth("eLH9q92jjXUb8xy6fysX") # adding my API key to the function.
library(devtools)
install_github('rWBclimate', 'ropensci')
View(syria)
install.packages(' ggthemes')
install.packages('ggthemes')
help.stary()
help.start()
stock <- "MSFT"
start.date <- "2006-01-12"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock, "&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
stock.data <- transform(stock.data,
week = as.POSIXlt(Date)$yday %/% 7 + 1,
wday = as.POSIXlt(Date)$wday,
year = as.POSIXlt(Date)$year + 1900)
library(ggplot2)
ggplot(stock.data, aes(week, wday, fill = Adj.Close)) +
geom_tile(colour = "white") +
scale_fill_gradientn(colours = c("#D61818","#FFAE63","#FFFFBD","#B5E384")) +
facet_wrap(~ year, ncol = 1)
#### Plotting ####
ggplot(data, aes(StartDate)) + # theme_bw() +
geom_line(stat = 'bin', size = 1.3, color = "#EB5C53") +
ylab("Number of Responses Per Day") + xlab("Date")
library(ggplot2)
library(lubridate)
setwd("~/Documents/Programming/ocha-data-survey")
data <- read.csv("data/survey-data-with-locations.csv", header=T)
data$StartDate <- mdy_hms(data$StartDate)
#### Plotting ####
ggplot(data, aes(StartDate)) + # theme_bw() +
geom_line(stat = 'bin', size = 1.3, color = "#EB5C53") +
ylab("Number of Responses Per Day") + xlab("Date")
#### Plotting ####
ggplot(data, aes(StartDate)) +  theme_bw() +
geom_line(stat = 'bin', size = 1.3, color = "#0988bb") +
ylab("Number of Responses Per Day") + xlab("Date")
ggplot(data, aes(StartDate)) +  theme_bw() +
geom_area(stat = 'bin', alpha = 0.3, fill = "#0988bb") +
geom_line(stat = 'bin', size = 1.3, color = "#0988bb") +
ylab("Number of Responses Per Day") + xlab("Date")
?element_text
#### Plotting ####
ggplot(data, aes(StartDate)) +  theme_bw() +
geom_area(stat = 'bin', alpha = 0.3, fill = "#0988bb") +
geom_line(stat = 'bin', size = 1.3, color = "#0988bb") +
ylab("Number of Responses Per Day") + xlab("Date") +
theme(title = element_text("Number of Respondents per Day"))
?element_text
#### Plotting ####
ggplot(data, aes(StartDate)) +  theme_bw() +
geom_area(stat = 'bin', alpha = 0.3, fill = "#0988bb") +
geom_line(stat = 'bin', size = 1.3, color = "#0988bb") +
ylab("Number of Responses Per Day") + xlab("Date") +
theme(title = "Number of Respondents per Day")
#### Plotting ####
ggplot(data, aes(StartDate)) +  theme_bw() +
geom_area(stat = 'bin', alpha = 0.3, fill = "#0988bb") +
geom_line(stat = 'bin', size = 1.3, color = "#0988bb") +
ylab("Number of Responses") + xlab("Date") +
labs(title = "Number of Responses per Day")
?plot.title
??plot.title
#### Plotting ####
ggplot(data, aes(StartDate)) +  theme_bw() +
geom_area(stat = 'bin', alpha = 0.3, fill = "#0988bb") +
geom_line(stat = 'bin', size = 1.3, color = "#0988bb") +
ylab("Number of Responses") + xlab("Date") +
labs(title = "Number of Responses per Day", type = "strong")
